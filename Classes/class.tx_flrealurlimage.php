<?php

/* * *************************************************************
 *  Copyright notice
 *
 *  (c) 2011 Tim Lochmueller, Sareen Millet, Dr. Ronald Steiner
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 * ************************************************************* */

require_once(PATH_tslib . 'class.tslib_pibase.php');

/**
 * The main class of fl_realurl_image
 *
 */
class tx_flrealurlimage extends tslib_cObj {

	private $IMAGE_conf = array(); // IMAGE-Object config
	private $fl_conf = array(); // config.fl_realurl_image from setup.txt / TypoScript merged with IMAGE-Object.fl_realurl_image
	private $fl_config = array(); // config from ext_conf_template.txt  (install-tool)
	private $image = array(); // image Array of Typo3
	private $fileTypeInformation = array(); // info about the file type
	/*
	  - 0: Height
	  - 1: Weight
	  - 2: Type-Ending
	  - 3: File-Name generated by Typo3 (typo3temp/pics/2355fb8381.jpg (after changing, cropping, ...)
	  - origFile: fileadmin/series/advanced-a-series/18__Urdhva_Kukkutasana_A.JPG (before changing, cropping, ...)
	  - origFile_mtime: 1249081200
	  - fileCacheHash: ed0180473f
	 */
	private $new_fileName = '';

	private $org_fileName = '';

	private $enable = TRUE;

	/**
	 * Outputting the image that fits to the realurl_image request
	 * Notice: normally the image should be in the static file cache
	 * ... so this is an emergency action only when no image is in static file cache
	 * -> to do
	 * 1) outputting image
	 * 2) recreate the static file cache
	 * 3) updating the DB-Entry
	 *
	 * @return void
	 */
	public function showImage() {
		// init - only for $this->createFileCache required
		$this->fl_config = $GLOBALS['fl_realurl_image'];
		// Path of the requested image
		$path = str_replace(t3lib_div::getIndpEnv('TYPO3_SITE_URL'), '', t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'));
		$path = trim($path, '/');
		// look up in DB-table if there is a image stored for this realurl
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('image_path,tstamp,realurl_path,page_id', 'tx_flrealurlimage_cache', 'realurl_path=\'' . $path . '\'', '', '', 1);
		if ($GLOBALS['TYPO3_DB']->sql_num_rows($res) > 0) {
			// get the information to the requested image
			$data = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
			// update DB to idicate that image was requested
			if (!strstr($data['page_id'], '?')) {
				$page_id = trim($data['page_id'] . ',?', ',');
			} else {
				$page_id = trim($data['page_id'], ',');
			}
			$insertArray = array(
				'tstamp'  => time(),
				// image link last requestet on
				'page_id' => $page_id
				// comma seperated list of pid's where the image has been requested from
			);
			$res = $GLOBALS['TYPO3_DB']->exec_UPDATEquery('tx_flrealurlimage_cache', 'realurl_path=\'' . $path . '\'', $insertArray);
			// linkStatic is switched on, then relink the image static.
			// The obviously lost image will be shown much faster next time
			if ($this->fl_config['fileLinks']) {
				$this->createFileCache($data['image_path'], $data['realurl_path']);
			}
			// cacheControl is switched on and the image has not been modified since last request
			// => loaded from browser cache 
			if ($this->fl_config['cacheControl'] && $_SERVER['HTTP_IF_MODIFIED_SINCE']) {
				$lastGet = strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']);
				if ($data['tstamp'] != 0 && $lastGet <= $data['tstamp']) {
					header('HTTP/1.1 304 Not Modified');
					die();
				}
			} // send headers for image and output the image
			// this is the "manual" way to display an image
			else {
				$info = getimagesize(PATH_site . $data['image_path']);
				header('Content-Type: ' . $info['mime']);
				header('Content-Length: ' . filesize(PATH_site . $data['image_path']));
				if ($GLOBALS['fl_realurl_image']['cacheControl'] && $data['tstamp'] != 0) {
					header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $data['tstamp']) . ' GMT');
				}
				readfile(PATH_site . $data['image_path']);
				die();
			}
		}
		// no image available => die empty - continue page processing
	}

	/**
	 * Add the absrefprefix
	 * @param $url
	 *
	 * @return string
	 */
	public function addAbsRefPrefix($url) {
		return htmlspecialchars($GLOBALS['TSFE']->absRefPrefix) . ltrim($url, '/');
	}

	/**
	 * main function of tx_flrealurlimage class
	 *
	 * @param array $conf IMAGE-Object configuration array
	 * @param array $info image info array:
	 *
	 * @return string
	 */
	public function main($conf, $info, $file = NULL) {
		$this->init($conf, $info, $file);

		if ($this->enable && trim($this->org_fileName) != '') {
			return $this->generateFileName();
		} else {
			return $this->org_fileName;
		}
	}

	/**
	 * initializing tx_flrealurlimage class
	 *
	 * @param       array       IMAGE-Object configuration array
	 * @param       array       image info array:
	 *
	 * @return        nothing
	 */
	private function init($conf, $image, $file) {
		// IMAGE_conf
		$this->IMAGE_conf = $conf;

		// fl_conf
		$global_conf = array();
		if (is_array($GLOBALS['TSFE']->tmpl->setup['config.']['fl_realurl_image.'])) {
			$global_conf = $GLOBALS['TSFE']->tmpl->setup['config.']['fl_realurl_image.'];
		}
		$local_conf = array();
		if (is_array($conf['fl_realurl_image.'])) {
			$local_conf = $conf['fl_realurl_image.'];
		}
		$this->fl_conf = t3lib_div::array_merge_recursive_overrule($global_conf, $local_conf, 0, 0);

		// fl_config
		$this->fl_config = $GLOBALS['fl_realurl_image'];

		// image Array
		$this->image = $image;

		// filetype
		$this->fileTypeInformation = $file;

		// new_fileName
		if ($conf['fl_realurl_image']) {
			$this->new_fileName = $conf['fl_realurl_image'];
		} else {
			$this->new_fileName = $GLOBALS['TSFE']->tmpl->setup['config.']['fl_realurl_image'];
		}
		if ($this->new_fileName == '1') {
			$this->new_fileName = '';
		}

		// enable
		if (strtolower($this->new_fileName) == 'off' || $this->new_fileName === 0 || // fl_realurl_image switched off on this page
			!is_array($GLOBALS['TSFE']->tmpl->setup['config.']['fl_realurl_image.']) // no static template
		) {
			$this->enable = FALSE;
		}

		// org_fileName
		$this->org_fileName = htmlspecialchars(trim(t3lib_div::rawUrlEncodeFP($image[3])));
	}

	/**
	 * The main function of fl_realurl_image
	 * - generates $this->new_fileName
	 * - writes in DB
	 * - creats static file caches
	 *
	 * @param       nothing
	 *
	 * @return        string       the new file name
	 */
	private function generateFileName() {
		// generate a text basis for a speaking file name
		if ($this->fl_conf['data'] && $this->new_fileName == '') {
			$this->new_fileName = $this->generateTextBase();
		}
		unset($this->fl_conf['data']); // important otherwise stdWrap overwrites so far generated new_fileName
		// if $textBase is already a filename then get only the name itself with no path or ending
		if (strstr($this->new_fileName, '/')) {
			$this->new_fileName = basename($this->new_fileName);
		}
		if (strstr($this->new_fileName, '.')) {
			$this->new_fileName = str_replace(array(
			                                       '.jpg',
			                                       '.JPG',
			                                       '.jpeg',
			                                       '.JPEG',
			                                       '.png',
			                                       '.PNG',
			                                       '.gif',
			                                       '.GIF'
			                                  ), '', $this->new_fileName);
		}
		// make this text basis suitable for a file name
		$this->new_fileName = $this->smartEncoding($this->new_fileName);
		// add the folder
		$this->new_fileName = $this->fl_conf['folder'] . '/' . $this->new_fileName;
		// add hash and ending = find a not occupied file name
		$this->new_fileName = $this->addHash($this->new_fileName);
		$this->new_fileName = $this->writeDBcollisionHandling($this->new_fileName);
		// delete the old file cache if new image is different to old
		$this->deleteFileCache($this->org_fileName, $this->new_fileName);
		// create the new file cache
		$this->createFileCache($this->org_fileName, $this->new_fileName);
		return $this->virtualPathRemove($this->new_fileName);
	}

	/**
	 * generates a text Base for generation of a speaking file name
	 *
	 * @param       nothing
	 *
	 * @return        string       Text name base
	 */
	private function generateTextBase() {
		$textBase = '';
		// get info to image
		$damInfo = $this->getDAMinfo();
		$pageInfo = $this->getPAGEinfo();
		$falInfo = $this->getFALInfo();
		$mediaInfo = $this->getMEDIAInfo();

		// walk the options until a possible base for a file-name is found
		$parts = t3lib_div::trimExplode('//', $this->fl_conf['data'], TRUE);
		$partSize = sizeof($parts);
		for ($i = 0; $i < $partSize && $textBase == ''; $i++) {
			list($source, $item) = explode(':', $parts[$i]);

			if ($source == 'fal' && $falInfo[$item]) {
				return $falInfo[$item];
			} elseif ($source == 'media' && $mediaInfo[$item]) {
				return $mediaInfo[$item];
			} elseif ($source == 'dam' && $damInfo[$item]) {
				return $damInfo[$item];
			} elseif ($source == 'ts' && ($this->IMAGE_conf[$item] || $this->IMAGE_conf[$item . '.'])) {
				$textBase = $this->stdWrap($this->IMAGE_conf[$item], $this->IMAGE_conf[$item . '.']);
			} elseif ($source == 'file' && $this->image[$item]) {
				$textBase = $this->image[$item];
			} elseif ($source == 'page' && $pageInfo[$item]) {
				$textBase = $pageInfo[$item];
			} elseif ($source != 'page' && $source != 'dam' && $source != 'file' && $source != 'ts' && $source != 'media' && $source != 'fal') {
				$textBase = $parts[$i];
			}
			$textBase = trim($textBase);
		}
		return $textBase;
	}

	/**
	 * @return bool|Tx_FlRealurlImage_Service_FileInformation
	 */
	protected function getFileInformation() {
		if (t3lib_div::compat_version('6.0.0')) {
			require_once(t3lib_extMgm::extPath('fl_realurl_image', 'Classes/Service/FileInformation.php'));
			return new Tx_FlRealurlImage_Service_FileInformation();
		}
		return FALSE;
	}

	/**
	 * @return array
	 */
	protected function getFALInfo() {
		if ($fileInformation = $this->getFileInformation()) {
			return $fileInformation->getByFal($this->image);
		}
		return array();
	}

	/**
	 * @return array
	 */
	protected function getMEDIAInfo() {
		if ($fileInformation = $this->getFileInformation()) {
			return $fileInformation->getByMedia($this->image);
		}
		return array();

	}

	/**
	 * get DAM info for the image in $this->image
	 *
	 * @param       nothing
	 *
	 * @return        array        info from DAM
	 */
	private function getDAMinfo() {
		if ($this->image['origFile'] && t3lib_extMgm::isLoaded('dam')) {
			// get information for item from tx_dam
			$items = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows('*', 'tx_dam', '(file_name = "' . basename($this->image['origFile']) . '" AND file_path = "' . t3lib_div::dirname($this->image['origFile']) . '/") ' . $this->enableFields('tx_dam') // $this->cObj = $this as we XCLASS cObj
				. ' AND sys_language_uid=0');
			// get language overlay
			if ($GLOBALS['TSFE']->sys_language_content) {
				$OLmode = ($GLOBALS['TSFE']->sys_language_mode == 'strict' ? 'hideNonTranslated' : '');
				$items[0] = $GLOBALS['TSFE']->sys_page->getRecordOverlay('tx_dam', $items[0], $GLOBALS['TSFE']->sys_language_content, $OLmode);
			}
			$damInfo = $items[0];
			return $damInfo;
		}
	}

	/**
	 * get (meta) info for the current Page
	 *
	 * @param       nothing
	 *
	 * @return        array        (meta) info from page
	 */
	private function getPAGEinfo() {
		$rootLineDepth = sizeof($GLOBALS['TSFE']->tmpl->rootLine);
		$pageInfo = $GLOBALS['TSFE']->tmpl->rootLine[$rootLineDepth - 1];
		return $pageInfo;
	}

	/**
	 * Convert a a text to something that can be used as a file name:
	 * - Convert spaces to underscores
	 * - Convert non A-Z characters to ASCII equivalents
	 * - Convert some special things like the 'ae'-character
	 * - Strip off all other symbols
	 * - pass through rawurlencode()
	 * Works with the character set defined as "forceCharset"
	 *
	 * @param       string        a text string to encode into a nice file name
	 *
	 * @return      string      Encoded text string
	 * @see rootLineToPath()
	 */
	private function smartEncoding($textBase) {
		// decode $textBase
		$textBase = urldecode($textBase);
		// stdWrap
		$textBase = $this->stdWrap($textBase, $this->fl_conf);
		// Convert some special tokens to the space character:
		$space = '-';
		if ($this->fl_conf['spaceCharacter']) {
			$space = $this->fl_conf['spaceCharacter'];
		}
		// spaceCharacter
		$textBase = strtr($textBase, ' -+_', $space . $space . $space);
		// smartEncoding
		if ($this->fl_conf['smartEncoding']) {
			$charset = $GLOBALS['TYPO3_CONF_VARS']['BE']['forceCharset'] ? $GLOBALS['TYPO3_CONF_VARS']['BE']['forceCharset'] : $GLOBALS['TSFE']->defaultCharSet;
			$textBase = $GLOBALS['TSFE']->csConvObj->specCharsToASCII($charset, $textBase); // Convert extended letters to ascii equivalents
			$textBase = preg_replace('/[^a-z0-9\/\\\]/i', $space, $textBase); // replace the rest with $space
		}
		// spaceCharacter
		$textBase = preg_replace('/[\/\\' . $space . ']+' . '/i', $space, $textBase); // Convert multiple $space to a single one
		$textBase = trim($textBase, $space); // trim $space
		// encoded $textBase
		$textBase = rawurlencode($textBase);
		// return
		return $textBase;
	}

	/**
	 * add a very simple Hash to $textBase
	 *
	 * @param        string        Text base: e.g. typo3temp/fl_realurl_image/myimage-name
	 *
	 * @return        string        Text base: e.g. typo3temp/fl_realurl_image/myimage-name-a7r
	 */
	private function addHash($textBase) {
		$org_base = pathinfo($this->org_fileName, PATHINFO_BASENAME);
		$org_end = pathinfo($this->org_fileName, PATHINFO_EXTENSION);

		$hashBase = $org_base;
		if (isset($this->image[3]) && strlen($this->image[3])) {
			$hashBase = t3lib_div::shortMD5($this->image[3], 24);
		}
		$hashLength = isset($this->fl_conf['hashLength']) ? (int)$this->fl_conf['hashLength'] : 0;

		if ($hashLength) {
			$space = $this->getSpaceCharacter();
			if ($hashLength > strlen($hashBase)) {
				$hashLength = strlen($hashBase);
			}
			$textBase .= $space . substr($org_base, 0, $hashLength);
		}
		return $textBase . '.' . $org_end;
	}

	/**
	 * Return the Space character
	 *
	 * @return string
	 */
	protected function getSpaceCharacter() {
		if (isset($this->fl_conf['spaceCharacter']) && strlen($this->fl_conf['spaceCharacter'])) {
			return $this->fl_conf['spaceCharacter'];
		}
		return '-';
	}

	/**
	 * Writes $textBase in the fl_realurl_image_cache table
	 * arter collissions handling
	 *
	 * @param        string        the path of the new image
	 *
	 * @return        string        the path of the new image after collision handling
	 */
	private function writeDBcollisionHandling($textBase) {
		list($trunk, $ending) = explode('.', $textBase);
		$count = '';
		while (1) {
			if ($this->fl_conf['hashLength'] && $count && $count > 0) {
				$space = '-';
				if ($this->fl_conf['spaceCharacter']) {
					$space = $this->fl_conf['spaceCharacter'];
				}
			} else {
				$space = '';
			}
			$newImageName_probe = $trunk . $space . $count . '.' . $ending;
			if ($this->writeDB($newImageName_probe)) {
				return $newImageName_probe;
			} else {
				// go count one up to avoid collision
				if ($count === '') { // Set count to 0 when run once
					$count = 0;
				} else {
					$count++;
				}
			}
		}
	}

	/**
	 * Writes in the DB - if not taken
	 *
	 * @param        string        the path to write in the DB
	 *
	 * @return        boolean        successfull?
	 */
	private function writeDB($new_fileName) {
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery('*', 'tx_flrealurlimage_cache', 'realurl_path=\'' . $new_fileName . '\'');
		$num = $GLOBALS['TYPO3_DB']->sql_num_rows($res);
		$data = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
		// the requested path is free up to now
		if ($num == 0) {
			$insertArray = array(
				'crdate'       => time(),
				// image link first created at
				'pid'          => intval($this->fl_config['storagePid']),
				// pid of the storage folder where the Typo3 list modul will find the DB enties
				'tstamp'       => time(),
				// image link last requestet on
				'image_path'   => $this->org_fileName,
				// path to the original image
				'realurl_path' => $new_fileName,
				// path to the new image (link)
				'page_id'      => $GLOBALS['TSFE']->id
				// comma seperated list of pid's where the image has been requested from
			);
			$res = $GLOBALS['TYPO3_DB']->exec_INSERTquery('tx_flrealurlimage_cache', $insertArray);
			return TRUE;
		} // requested path already taken by this picture
		elseif ($num == 1 && $data['image_path'] == $this->org_fileName) {
			$pids = explode(',', $data['page_id']);
			if (!in_array($GLOBALS['TSFE']->id, $pids)) {
				$page_id = trim($data['page_id'] . ',' . $GLOBALS['TSFE']->id, ',');
			} else {
				$page_id = trim($data['page_id'], ',');
			}
			// insert in DB
			$insertArray = array(
				'tstamp'  => time(),
				// image link last requestet on
				'page_id' => $page_id
				// comma seperated list of pid's where the image has been requested from
			);
			$res = $GLOBALS['TYPO3_DB']->exec_UPDATEquery('tx_flrealurlimage_cache', 'realurl_path=\'' . $new_fileName . '\'', $insertArray);
			return TRUE;
		} // requested path already reserved for another picture
		else {
			return FALSE;
		}
	}

	/**
	 * Deleting the old image in the fl_realurl_image file cache
	 * if it is different from the original image.
	 * A new, different image has to take this place later and will carie it's name
	 *
	 * @param        string        the path to the original image e.g.: typo3temp/pics/2305e38d9c.jpg
	 * @param        string        the path to the new image
	 *
	 * @return      nothing
	 */
	private function deleteFileCache($org_path, $new_path) {
		if (TYPO3_OS == 'WIN') {
			if (is_file($new_path) && (md5_file($org_path) != md5_file($new_path))) {
				unlink($new_path);
			}
		} else {
			if (is_file(PATH_site . $new_path) && (md5_file(PATH_site . $org_path) != md5_file(PATH_site . $new_path))) {
				unlink(PATH_site . $new_path);
			}
		}
		return;
	}

	/**
	 * creates a hard-link / sym-link / copy of the oritinal image to the new location
	 *
	 * @param string $org_path the path to the original image e.g.: typo3temp/pics/2305e38d9c.jpg
	 * @param string $new_path the path to the new image
	 *
	 * @return void
	 */
	private function createFileCache($org_path, $new_path) {

		// Better to throw a exception to find the mistake?!?!
		if (empty($org_path)) {
			return;
		}

		// create folder if required
		$new_folder = t3lib_div::dirname($new_path);
		if (!is_dir($new_folder)) {
			if (!t3lib_div::mkdir($new_folder)) {
				throw new Exception('Can\'t create the fl_realurl_image Folder "' . $new_folder . '"');
			}
		}
		if (TYPO3_OS == 'WIN') {
			if (is_file($new_path)) {
				return;
			}
			// no copy
			if ($this->fl_config['fileLinks'] == 'none') {
				return;
			} // true copy
			elseif ($this->fl_config['fileLinks'] == 'copy') {
				copy($org_path, $new_path);
			} // symlink
			// ... not possible in WIN => = hard-link
			// hard-link
			else {
				exec('fsutil hardlink create "' . $new_path . '" "' . $org_path . '"');
			}
		} else {
			if (is_file(PATH_site . $new_path)) {
				return;
			}
			// no copy
			if ($this->fl_config['fileLinks'] == 'none') {
				return;
			} // true copy
			elseif ($this->fl_config['fileLinks'] == 'copy') {
				copy(PATH_site . $org_path, PATH_site . $new_path);
			} // symlink
			elseif ($this->fl_config['fileLinks'] == 'symLink') {
				symlink(PATH_site . $org_path, PATH_site . $new_path); // Secure for open_basedir restriction
			} // hard-link
			else {
				link($org_path, PATH_site . $new_path);
			}
		}
	}

	/**
	 * Removing a part from the path
	 *
	 * @param        string        the path
	 *
	 * @return        string      the path after removing
	 */
	private function virtualPathRemove($path) {
		if ($this->fl_config['virtualPathRemove']) {
			return str_replace($this->fl_config['virtualPathRemove'], '', $path);
		} else {
			return $path;
		}
	}

}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/fl_realurl_image/Classes/class.tx_flrealurlimage.php']) {
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/fl_realurl_image/Classes/class.tx_flrealurlimage.php']);
}
?>